open Ar.Cbu
open Alcotest

let test_valid_numbers () =
  let numbers =
    [
      "0070999020000065706080"
    ; "0110433630043313857683"
    ; "0140339601630201381276"
    ; "0140023601506802625874"
    ; "0440064640000142941092"
    ; "0720146820000001062340"
    ; "0720168020000001183236"
    ; "0720380888000035533968"
    ; "0070034420000002310035"
    ; "0070085620000002598406"
    ; "0070089420000002991793"
    ; "0070090020000004146504"
    ; "0070109530004141775453"
    ; "0070114920000004100700"
    ; "0070274620000003448717"
    ; "0070999020000057705860"
    ; "0110097630009704213797"
    ; "0110102320010200444955"
    ; "0110106130010603111097"
    ; "0110106130010604601847"
    ; "0110125220012510923535"
    ; "0110130620013014594573"
    ; "0110175730017523189801"
    ; "0110204030020409626051"
    ; "0110216320021610025999"
    ; "0110230930023001323933"
    ; "0110230930023008918451"
    ; "0110283520028310814652"
    ; "0110363020036300101822"
    ; "0110377720037700120402"
    ; "0110385220038500036492"
    ; "0110409120040921180719"
    ; "0110424420042410570553"
    ; "0110454130045407688379"
    ; "0110477020047731297428"
    ; "0110508720050800019135"
    ; "0110521620052100223696"
    ; "0110551320055100112719"
    ; "0140313601697100515896"
    ; "0140313601697100557414"
    ; "0140339601630201381276"
    ; "0140351801684605023087"
    ; "0140352501684700733410"
    ; "0140352503684700819149"
    ; "0140369303631000285682"
    ; "0140391403672850026131"
    ; "0140410801680000361629"
    ; "0140417701630000088992"
    ; "0140444301650700088379"
    ; "0140476401626402048153"
    ; "0150501602000120967405"
    ; "0168888100008274410158"
    ; "0168888100000641080265"
    ; "0170074920000030293449"
    ; "0170334220000030367766"
    ; "0200306901000040010097"
    ; "0200348901000000334779"
    ; "0200398411000030044362"
    ; "0200405501000000213951"
    ; "0200451211000030033962"
    ; "0200915901000000274233"
    ; "0340056200560007577005"
    ; "0720000720000001681136"
    ; "0720079388000035942322"
    ; "0720297320000000081418"
    ; "0720402320000002633754"
    ; "0930301810100000992800"
    ; "0930301810100001043132"
    ; "0930310010100014278400"
    ; "0930324720100053299139"
    ; "0930324720100055211111"
    ; "0940099324001313220028"
    ; "1500006000005660447200"
    ; "1500087900051332075196"
    ; "1910119655011901084646"
    ; "1910104255110401549353"
    ; "1910126455012600786400"
    ; "1910186855018601143246"
    ; "1910369755036901130632"
    ; "2850345330000000781858"
    ; "2850353830094127564171"
    ; "2850376730000059833142"
    ; "2850400530094105352671"
    ; "2850536730094125514871"
    ; "2850590940090418135201"
    ; "2850729540000001576069"
    ; "2850732530000002707016"
    ; "2850734940094696942458"
    ; "2850760830094054972021"
    ; "2850882330094054578991"
    ; "3110003611000000537014"
    ; "3110013511000600125046"
    ; "3300542115420000740012"
    ; "3300551315510001836040"
    ; "3860002703000000438381"
    ; "3860011901000020526675"
    ; "3860060703000013990500"
    ; "5729195067928761667584"
    ; "7362966507842824472644"
    ; "9498175528566296510521"
    ]
  in
  List.iter
    (fun n -> check bool (n ^ " should be valid") true (is_valid n))
    numbers

let test_invalid_length () =
  Alcotest.check_raises "should raise Invalid_length" Invalid_length (fun () ->
      ignore (validate "285059094009041"))

let test_invalid_format () =
  check_raises "should raise Invalid_format" Invalid_format (fun () ->
      ignore (validate "A850590940090418135201"))

let test_valid_number () =
  check string "should validate correct number" "0940099324001313220028"
    (validate "0940099324001313220028")

let test_invalid_first_part () =
  check_raises "should raise Invalid_checksum" Invalid_checksum (fun () ->
      ignore (validate "1940099324001313220028"))

let test_invalid_second_part () =
  check_raises "should raise Invalid_checksum" Invalid_checksum (fun () ->
      ignore (validate "0940099324001313220038"))

let test_cases =
  [
    ( "CBU validation"
    , [
        test_case "valid numbers" `Quick test_valid_numbers
      ; test_case "invalid length" `Quick test_invalid_length
      ; test_case "invalid format" `Quick test_invalid_format
      ; test_case "valid number" `Quick test_valid_number
      ; test_case "invalid first part" `Quick test_invalid_first_part
      ; test_case "invalid second part" `Quick test_invalid_second_part
      ] )
  ]

let () = run "CBU" test_cases
